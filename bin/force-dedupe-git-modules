#! /usr/bin/env node

"use strict";

var fs = require("fs");
var semver = require("semver");

function findModulesFromGit(modulePath, callback) {
	// handle dependencies
	if (fs.existsSync(modulePath + "/node_modules")) {
		var deps = fs.readdirSync(modulePath + "/node_modules");
		for (var i = 0; i != deps.length; ++i) {
			if (deps[i].charAt(0) == ".") {
				continue;
			}
			findModulesFromGit(modulePath + "/node_modules/" + deps[i], callback);
		}
	}
	// skip if package.json does not exist
	if (! fs.existsSync(modulePath + "/package.json")) {
		return;
	}
	// read and parse
	var packageJsonSrc = fs.readFileSync(modulePath + "/package.json", { encoding: "utf-8" });
	var packageJson = JSON.parse(packageJsonSrc);
	// skip if is not a git-based module
	if (typeof packageJson._from != "string") {
		return;
	}

	var moduleName = packageJson.name;
	var moduleVersion = packageJson.version;

	if (!isGitModule(packageJson)) {
		return;
	}

	if (typeof moduleName === "string") {
		return callback(moduleName, moduleVersion, modulePath);
	}

	moduleName = getModuleName(packageJson);

	// notify the callback
	callback(moduleName, moduleVersion, modulePath);
}

function getModuleName(packageJson) {
	var match = packageJson._from.match(/^([^@]+)@git(\+ssh|\+https?)?:/);
	if (match !== null) {
		return match[1];
	}

	match = packageJson._resolved.split('/');
	return match[match.length-1].split('#')[0];
}

function isGitModule(packageJson) {
	if (packageJson._from &&
		  packageJson._from.match(/^([^@]+)@git(\+ssh|\+https?)?:/) !== null) {
		return true;
	}

	if (packageJson._resolved &&
		  packageJson._resolved.match(/^git(\+ssh|\+https?)?:/) !== null) {
		return true;
	}

	return false;
}

function rmdir_r(dirPath) {
	var files = fs.readdirSync(dirPath);
	for (var i = 0; i != files.length; ++i) {
		var filePath = dirPath + "/" + files[i];
		if (fs.lstatSync(filePath).isDirectory()) {
			rmdir_r(filePath);
		} else {
			fs.unlinkSync(filePath);
		}
	}
	fs.rmdirSync(dirPath);
}

function main() {
	findModulesFromGit(".", function (name, version, path) {
		console.log(name, path);
		if (path.match(/^.(\/node_modules\/[^/]+|)$/)) {
			console.log("preserving git-based module: " + name + " at " + path);
			return;
		}
		var raisedDir = "./node_modules/" + name;
		if (fs.existsSync(raisedDir)) {
			var packageJsonOfExisting = JSON.parse(fs.readFileSync(raisedDir + "/package.json", { encoding: "utf-8" }));
			if (semver.lt(packageJsonOfExisting.version, version)) {
				console.log("raising git-based module " + name + "@" + version + " at " + path + " to " + raisedDir + ", replacing the existing @" + packageJsonOfExisting.version);
				rmdir_r(raisedDir);
				fs.renameSync(path, raisedDir);
			} else {
				console.log("removing git-based module " + name + "@" + version + " at " + path + ", " + name + "@" + packageJsonOfExisting.version + " already exists at " + raisedDir);
				rmdir_r(path);
			}
		} else {
			console.log("raising module " + name + "@" + version + " at " + path + " to " + raisedDir);
			fs.renameSync(path, raisedDir);
		}
	});
}

main();
